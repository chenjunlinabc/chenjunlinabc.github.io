<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>npm on 小陈的个人博客</title>
    <link>https://blog.cjlio.com/tags/npm/</link>
    <description>Recent content in npm on 小陈的个人博客</description>
    <image>
      <url>https://blog.cjlio.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.cjlio.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Mar 2022 10:00:00 +0000</lastBuildDate><atom:link href="https://blog.cjlio.com/tags/npm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>browserslist的简单配置</title>
      <link>https://blog.cjlio.com/posts/140/</link>
      <pubDate>Sat, 12 Mar 2022 10:00:00 +0000</pubDate>
      
      <guid>https://blog.cjlio.com/posts/140/</guid>
      <description>browserslist是查询浏览器列表的工具，browserslisp的配置可写在package.json中，也可以单独写在.browserslistrc配置⽂件中
browserslist的配置文件会被Autoprefixer，Babel，postcss-preset-env，eslint-plugin-compat，stylelint-no-unsupported-browser-features，postcss-normalize，obsolete-webpack-plugin工具读取，并且对配置的目标浏览器做适配工作
npx browserslist可查看根据条件输出的浏览器列表
查看全球用户份额大于0.2%的浏览器
npx browserslist &amp;ldquo;&amp;gt; 0.2%&amp;rdquo;
查询Chrome最新1个版本
npx browserslist &amp;ldquo;last 1 Chrome versions&amp;rdquo;
查看browserslist的默认配置
npx browserslist &amp;ldquo;defaults&amp;rdquo;
browserslist的默认配置为&amp;gt; 0.5% and last 2 versions adn Firefox ESR and not dead
not dead的意思是不输出官方不再维护的浏览器（例如ie10），dead是不维护，not是不输出
and就是和，or是或者
browserslist的配置
package.json（browserslist官方推荐用这个）
&amp;quot;browserslist&amp;quot;: [ &#39;&amp;gt; 0.2%&#39;, &#39;last 1 Chrome versions&#39; &#39;not dead&#39; ] 或者写成
&amp;quot;browserslist&amp;quot;: [ &#39;&amp;gt; 0.2% and last 1 Chrome versions and not dead&#39;, ] .browserslistrc
&amp;gt; 0.2% and last 1 Chrome versions and not dead browserslist数据的优先级：当前项目的package.</description>
    </item>
    
    <item>
      <title>简单了解并且使用npm script</title>
      <link>https://blog.cjlio.com/posts/109/</link>
      <pubDate>Mon, 20 Sep 2021 14:30:00 +0000</pubDate>
      
      <guid>https://blog.cjlio.com/posts/109/</guid>
      <description>npm script是package.json中可以定义的脚本命令，可以用来实现自动化构建，例如：
&amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;node hallo.js&amp;quot; } npm run dev // 等于执行node hallo.js
查看当前项目的全部npm脚本
npm run
注意：当前项目的node_modules/bin下的全部依赖都可以直接访问
如果要执行多个脚本可以用&amp;amp;&amp;amp;（依次运行），&amp;amp;（并行运行）
npm script有pre和post两个钩子，这两个钩子可以分别来做准备工作和清理工作等等，例如：
&amp;quot;scripts&amp;quot;: { &amp;quot;predev&amp;quot;: &amp;quot;echo hallo&amp;quot;, &amp;quot;dev&amp;quot;: &amp;quot;node hallo.js&amp;quot;, &amp;quot;postdev&amp;quot;: &amp;quot;echo yes&amp;quot; } 相对于npm run predev &amp;amp;&amp;amp; npm run dev &amp;amp;&amp;amp; npm run postdev
像install，uninstall，publish，test，start等等都有pre和post这两个钩子
查看正在运行的脚本
const NpmScript = process.env.npm_lifecycle_event console.log(NpmScript)
可以缩写不用run，例如：npm dev
npm script可以使用npm内部变量，例如：
{ &amp;quot;name&amp;quot;: &amp;quot;root&amp;quot;, &amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;node hallo.js $npm_package_name&amp;quot; } } 获取npm内部变量name
console.log(process.env.npm_package_name)
脚本错误抛出
&amp;quot;scripts&amp;quot;: { &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot; } 传递参数</description>
    </item>
    
    <item>
      <title>node.js包管理工具npm的简单使用</title>
      <link>https://blog.cjlio.com/posts/31/</link>
      <pubDate>Wed, 16 Jun 2021 15:05:00 +0000</pubDate>
      
      <guid>https://blog.cjlio.com/posts/31/</guid>
      <description>npm是Node.js的默认包管理工具
安装npm：安装node.js(一般来说安装nodejs都会安装npm的)
npm -v 查看npm版本号 node -v 查看node版本号 npm install nmp@latest -g 更新最新nmp，-g全局，没有加-g就是本地安装，或者在@后面加版本号来更新到指定版本的npm npm init -y 初始化 npm i 要安装的依赖 先检查有没有这个东西，有的话就下载下来 npm uninstall 要删除的依赖的名称 npm i 要安装的依赖@版本号 安装指定版本的依赖 npm update 依赖名称 安装最新的依赖或者更新npm npm init -y 使用默认的参数，去掉-y就是手动配置 npm run 对象名 执行脚本,引用package.json中的scripts对象，在对象中添加脚本 npm adduser 注册npm账号 npm publish 发布npm包 npm install 一键安装package.json文件里的所有依赖 npm install &amp;ndash;dependencies 只安装package.json里的dependencies的文件 npm install &amp;ndash;devDependencies 只安装package.json里的devDependencies文件 会自动将package.json中的模块安装到node-modules文件夹
升级插件 npm-check-updates使用 npm install -g npm-check-updates 安装npm-check-updates插件 ncu 查看package.json中依赖的最新版本 ncu -u 更新依赖到最新版本 ncu -a 更新全部依赖到最新版本 npm update</description>
    </item>
    
  </channel>
</rss>
